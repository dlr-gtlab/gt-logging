# Variables that are defined globally for the pipeline
variables:
  PIPELINEVERSION: "2.1.0"
  GIT_SUBMODULE_STRATEGY: "recursive"
  GIT_STRATEGY: "clone"
  
  # Regulare expression pattern
  # enclose the branch name with ^ and $
  # separete severl branch names with |
  # e.g. /^main$|^main_1_0$/
  STABLE_BRANCHES: /^master$/
  
  # Name of the unstable branch (if it exists)
  # UNSTABLE_BRANCH: unstable_master

include:
  - project: 'at-twk/gitlab-templates'
    file: '/ci-templates/.ci-templates-cmake-1.0.yml'

stages:
  - update
  - build
  - buildStatic
  - test
  - regressionTest
  - unstableBuild
  - unstableTest
  - deploy
  - codequality
  - package
  - badges

# build on Windows system
windowsBuildDebug:
  stage: build
  extends: 
    - .build-win_17
    - .run-always
  script:
    - $env:PATH+=(";"+$env:QT_INSTALL_PATH+"\bin;")
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install-msvc2017-dbg -DBUILD_UNITTESTS=ON
    - cmake --build build --target install

windowsBuildStaticDebug:
  stage: buildStatic
  extends: 
    - .build-win_17
    - .run-master-and-tags
  script:
    - $env:PATH+=(";"+$env:QT_INSTALL_PATH+"\bin;")
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install-msvc2017-static-dbg -DBUILD_UNITTESTS=ON -DBUILD_SHARED_LIBS=OFF
    - cmake --build build --target install
    
    
windowsBuildDebugUnstable:
  stage: unstableBuild
  extends: 
    - .build-win_20
    - .run-always
  script:
    - $env:PATH+=(";"+$env:QT_INSTALL_PATH+"\bin;")
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install-msvc2019-dbg -DBUILD_UNITTESTS=ON
    - cmake --build build --target install

windowsBuildRelease:
  stage: build
  extends: 
    - .build-win_17
    - .run-master-and-tags
  script:
    - $env:PATH+=(";"+$env:QT_INSTALL_PATH+"\bin;")
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install-msvc2017
    - cmake --build build --target install

windowsBuildStaticRelease:
  stage: buildStatic
  extends: 
    - .build-win_17
    - .run-master-and-tags
  script:
    - $env:PATH+=(";"+$env:QT_INSTALL_PATH+"\bin;")
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install-msvc2017-static -DBUILD_SHARED_LIBS=OFF
    - cmake --build build --target install

windowsBuildReleaseUnstable:
  stage: unstableBuild
  extends: 
    - .build-win_20
    - .run-master-and-tags
  script:
    - $env:PATH+=(";"+$env:QT_INSTALL_PATH+"\bin;")
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install-msvc2019
    - cmake --build build --target install

# build on Linux system
linuxBuildDebug:
  stage: build
  extends: 
    - .build-linux_17
    - .run-always
  script:
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install-linux-dbg -DBUILD_UNITTESTS=ON
    - cmake --build build --target install

linuxBuildStaticDebug:
  stage: buildStatic
  extends: 
    - .build-linux_17
    - .run-master-and-tags
  script:
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install-linux-static-dbg -DBUILD_UNITTESTS=ON -DBUILD_SHARED_LIBS=OFF
    - cmake --build build --target install
    
linuxBuildDebugUnstable:
  stage: unstableBuild
  extends: 
    - .build-linux_20
    - .run-always
  script:
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install-linux-dbg -DBUILD_UNITTESTS=ON
    - cmake --build build --target install

linuxBuildRelease:
  stage: build
  extends: 
    - .build-linux_17
    - .run-master-and-tags
  script:
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install-linux
    - cmake --build build --target install

linuxBuildStaticRelease:
  stage: buildStatic
  extends: 
    - .build-linux_17
    - .run-master-and-tags
  script:
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install-linux-static -DBUILD_SHARED_LIBS=OFF
    - cmake --build build --target install
 
linuxBuildReleaseUnstable:
  stage: unstableBuild
  extends: 
    - .build-linux_20
    - .run-master-and-tags
  script:
    - cmake -B build -S . -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install-linux
    - cmake --build build --target install


# run tests using the binary built before
.testWinTemplate:
  tags: ["windows", "docker"]
  extends: 
    - .run-always
  before_script:
    - '& $env:GTLAB_UPDATE_TOOL up --confirm-command; $null'
  script:
    - $env:path = "$env:GTLAB_DEV_TOOLS\binDebug;$env:path"
    - cd build
    - .\GTlabLoggingTests.exe --gtest_output=xml:unittests.xml
  artifacts:
    paths:
      - "build/unittests.xml"
    expire_in: 1 week
    reports:
      junit: build/unittests.xml

# run tests using the binary built before
testWin:
  stage: test
  image: at-twk-hal9000.intra.dlr.de:5000/dlr-at/gtlabdev-1_7-win
  extends: 
    - .testWinTemplate
  needs: ["windowsBuildDebug"]

testWinUnstable:
  stage: unstableTest
  image: at-twk-hal9000.intra.dlr.de:5000/dlr-at/gtlabdev-2_0-win
  extends:
    - .testWinTemplate
  needs: ["windowsBuildDebugUnstable"]

.testLinuxTemplate:
  tags: ["linux", "docker"]
  extends: 
    - .run-always
  before_script:
    # update to latest dev tools
    - '"$GTLAB_UPDATE_TOOL" up --confirm-command'
  script:
    - export LD_LIBRARY_PATH=`pwd`/install-linux-dbg/lib/logging
    - ./build/GTlabLoggingTests --gtest_output=xml:unittests.xml
  variables:
    GIT_SUBMODULE_STRATEGY: "none"
  artifacts:
    paths:
      - "unittests.xml"
    expire_in: 1 week
    reports:
      junit: unittests.xml

testLinux:
  stage: test
  extends: 
    - .testLinuxTemplate
  image: at-twk-hal9000.intra.dlr.de:5000/dlr-at/gtlabdev-1_7-buster
  needs: ["linuxBuildDebug"]

testLinuxUnstable:
  stage: unstableTest
  extends: 
    - .testLinuxTemplate
  image: at-twk-hal9000.intra.dlr.de:5000/dlr-at/gtlabdev-2_0-buster
  needs: ["linuxBuildDebugUnstable"]

.package:
  stage: package
  tags: ["docker", "linux"]
  extends: [".run-master-and-tags"]
  image: debian:buster
  script:
    - cp -r install-$toolchain-dbg/* install-$toolchain
    - mv install-$toolchain gtlab-logging-$toolchain
    - tar czf gtlab-logging-$toolchain.tar.gz gtlab-logging-$toolchain
  artifacts:
    name: "gtlab-logging-$toolchain"
    paths: ["gtlab-logging-$toolchain.tar.gz"]
  variables:
    toolchain: msvc2019
    GIT_STRATEGY: "none"

package-win-gtlab_2.0:
  extends: [".package"]
  needs: ["windowsBuildDebugUnstable", "windowsBuildReleaseUnstable"]
  variables:
    toolchain: msvc2019

package-win-gtlab_1.7:
  extends: [".package"]
  needs: ["windowsBuildDebug", "windowsBuildRelease"]
  variables:
    toolchain: msvc2017

package-linux-gtlab_2.0:
  extends: [".package"]
  needs: ["linuxBuildDebugUnstable", "linuxBuildReleaseUnstable"]
  variables:
    toolchain: linux

package-linux-gtlab_1.7:
  extends: [".package"]
  needs: ["linuxBuildDebug", "linuxBuildRelease"]
  variables:
    toolchain: linux

.package-static:
  stage: package
  tags: ["docker", "linux"]
  extends: [".run-master-and-tags"]
  image: debian:buster
  script:
    - cp -r install-$toolchain-static-dbg/* install-$toolchain-static
    - mv install-$toolchain-static gtlab-logging-$toolchain-static
    - tar czf gtlab-logging-$toolchain-static.tar.gz gtlab-logging-$toolchain-static
  artifacts:
    name: "gtlab-logging-$toolchain-static"
    paths: ["gtlab-logging-$toolchain-static.tar.gz"]
  variables:
    toolchain: msvc2017
    GIT_STRATEGY: "none"

package-win-gtlab_1.7_static:
  extends: [".package-static"]
  needs: ["windowsBuildStaticDebug", "windowsBuildStaticRelease"]
  variables:
    toolchain: msvc2017

package-linux-gtlab_1.7_static:
  extends: [".package-static"]
  needs: ["linuxBuildStaticDebug", "linuxBuildStaticRelease"]
  variables:
    toolchain: linux

.conan:
  stage: package
  extends: [".run-always"]
  needs: []
  before_script:
    - pip install --upgrade conan==1.59.0 --quiet
    - conan profile new default --detect --force
  script:
    # Remove all local packages matching at-twk/unstable
    - conan remote add gitlab https://gitlab.dlr.de/api/v4/projects/20199/packages/conan --force
    - conan remove *$CONAN_CHANNEL_REFERENCE -f
    - conan create . $CONAN_CHANNEL_REFERENCE  -pr $CONAN_PROFILE -pr:b $CONAN_PROFILE
  variables:
    CONAN_LOGIN_USERNAME: ci_user
    CONAN_PASSWORD: ${CI_JOB_TOKEN}
    CONAN_CHANNEL_REFERENCE: at-twk/testing
    CONAN_PROFILE: default
    GIT_SUBMODULE_STRATEGY: "none"

conan-pkg 1/2:
  extends:
    - .conan
  image: conanio/gcc8
  tags: ["docker", "linux"]
  before_script:
    - pip install --upgrade conan==1.59.0 --quiet
    - conan profile new default --detect --force
    - conan profile update settings.compiler.libcxx=libstdc++11 default
  after_script:
    # Upload all packages. This should only include the newly created ones
    - if [ $CI_COMMIT_TAG ]; then conan upload *$CONAN_CHANNEL_REFERENCE  --all -c -r gitlab; fi

conan-pkg 2/2:
  extends:
    - .conan
  image: at-twk-hal9000.intra.dlr.de:5000/dlr-at/msvc-2019
  tags: ["docker", "windows"]
  before_script:
    - $env:path += ";c:\Python3;c:\Python3\Scripts"
    - pip install --upgrade conan==1.59.0 --quiet
    - conan profile new default --detect --force
  after_script:
      # Upload all packages. This should only include the newly created ones
    - $env:path += ";c:\Python3;c:\Python3\Scripts"
    - if ($CI_COMMIT_TAG -ne $null) {conan upload *$CONAN_CHANNEL_REFERENCE  --all -c -r gitlab }

# code quality
cppcheck:
  stage: codequality
  extends: .cppCheckReportTemplate
  allow_failure: true

check-license:
   stage: codequality
   tags: ["docker", "linux"]
   needs: []
   image: at-twk-hal9000.intra.dlr.de:5000/dlr-at/buster-dev
   before_script:
    - python3 -m pip install reuse
   script:
    - reuse lint
   variables:
     GIT_SUBMODULE_STRATEGY: "none"

pages:
  stage: badges
  extends: .pageTemplate

# badges
badges:
  stage: badges
  extends: 
    - .stable-only-master
    - .badgeTemplate
  dependencies:
    - windowsBuildDebug
    - linuxBuildDebug
    - testWin
    - testLinux

badgesUnstable:
  stage: badges
  extends: 
    - .unstable-only-master
    - .badgeTemplate
  dependencies:
    - windowsBuildDebugUnstable
    - linuxBuildDebugUnstable
    - testWinUnstable
    - testLinuxUnstable
